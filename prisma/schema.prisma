datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Status {
  OPEN
  IN_PROGRESS
  CLOSED
  PENDING
  REJECTED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum Role {
  USER
  ADMIN
  MANAGER
}

model User {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  username        String?
  name            String?
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  // Relations
  accounts        Account[]
  tickets         Ticket[]         @relation("UserTickets") // Tickets created by the user
  assignedTickets Ticket[]         @relation("UserAssignedTickets") // Tickets assigned to the user
  comments        Comment[]        @relation("UserComments") // a user can have many comments
  roleId          String?          @db.ObjectId // Foreign key to UserRole
  role            UserRole?        @relation(fields: [roleId], references: [id])
  memberships     UserGroup[] // Many-to-Many relationship with Group through UserGroup
  incidents       TicketAnalysis[] // A user can have multiple incidents

  //added this for ticket convo
  conversationIds String[]       @db.ObjectId
  conversations   Conversation[] @relation(fields: [conversationIds], references: [id]) // this represent the convos where the user is part of
  seenMessagesIds String[]       @db.ObjectId
  seenMessages    Message[]      @relation("Seen", fields: [seenMessagesIds], references: [id]) // this represent the messages that the user has seen

  messages Message[] // this represent the messages that the user has sent
}

model TicketAnalysis {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  title           String   @unique
  description     String
  summary         String
  incidentType    String
  severity        String
  resolutionSteps Json
  recommendations String[]
  rawContent      String
  metadata        Json
  timestamp       DateTime @default(now())

  // Link to the user who analyzed the ticket
  user   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId

  // One-to-one relation with Ticket
  ticket   Ticket @relation(fields: [ticketId], references: [id])
  ticketId String @unique @db.ObjectId
}

model Ticket {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String   @unique
  description String
  priority    Priority @default(LOW)
  status      Status   @default(OPEN)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  type        String   @default("TASK")

  userId       String  @db.ObjectId
  assignedToId String? @db.ObjectId
  groupId      String  @db.ObjectId

  createdBy  User      @relation("UserTickets", fields: [userId], references: [id])
  assignedTo User?     @relation("UserAssignedTickets", fields: [assignedToId], references: [id], onDelete: SetNull)
  group      Group     @relation(fields: [groupId], references: [id])
  comments   Comment[] @relation("TicketComments")

  // âœ… Optional One-to-One relation
  conversation   Conversation? @relation("TicketConversation", fields: [conversationId], references: [id])
  conversationId String?       @db.ObjectId

  TicketAnalysis TicketAnalysis?
}

model Conversation {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name          String?
  isGroup       Boolean?

  messagesIds String[]  @db.ObjectId
  messages    Message[]

  userIds String[] @db.ObjectId
  users   User[]   @relation(fields: [userIds], references: [id])

  // Change to one-to-many relationship
  tickets Ticket[] @relation("TicketConversation")
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  image     String?
  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId
  seen    User[]   @relation("Seen", fields: [seenIds], references: [id])

  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model UserRole {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        Role   @unique // Directly use the enum here for the role (USER, ADMIN, etc.)
  portee      String
  description String
  users       User[] // One role can have many users
}

model Group {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String      @unique
  memberships UserGroup[] // Many-to-Many relationship with User through UserGroup
  tickets     Ticket[] // Tickets associated with the group
  description String
}

//links users to groups
model UserGroup {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  groupId String @db.ObjectId

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade) // if a group is deleted their memberships in all grouo is deleted
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId]) // Ensure a user cannot join the same group multiple times
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign Keys
  userId   String? @db.ObjectId
  ticketId String  @db.ObjectId

  // Relations
  user   User?  @relation("UserComments", fields: [userId], references: [id], onDelete: SetNull)
  ticket Ticket @relation("TicketComments", fields: [ticketId], references: [id], onDelete: Cascade)

  // Reply logic - Modified to handle cyclic references
  parentId String?   @db.ObjectId
  parent   Comment?  @relation("ReplyTo", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies  Comment[] @relation("ReplyTo")

  deleted Boolean @default(false)
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Embedding {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  resourceId String   @map("resource_id") @db.ObjectId
  content    String
  embedding  Float[] // Store vector as array of floats
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@map("embeddings")
}

model Resource {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")
  embeddings Embedding[]

  @@map("resources")
}
