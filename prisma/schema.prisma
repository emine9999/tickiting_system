datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
  MANAGER
}

enum Status {
  OPEN
  IN_PROGRESS
  CLOSED
  PENDING
  REJECTED
}
enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
 
model User {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  username       String?
  name           String?
  email          String?     @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  // Relations
  accounts       Account[]
  tickets        Ticket[]    @relation("UserTickets") // Tickets created by the user
  assignedTickets Ticket[]   @relation("UserAssignedTickets") // Tickets assigned to the user
  comments       Comment[]   @relation("UserComments") // Comments made by the user
  role           Role        @default(USER) // Default role is USER
  memberships    UserGroup[] // Many-to-Many relationship with Group through UserGroup
}

model Group {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  name           String      @unique
  memberships    UserGroup[] // Many-to-Many relationship with User through UserGroup
  tickets        Ticket[]    // Tickets associated with the group
  description    String
}

//links users to groups
model UserGroup {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userId    String @db.ObjectId
  groupId   String @db.ObjectId

  // Relations
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade) // if a group is deleted their memberships in all grouo is deleted
  group     Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId]) // Ensure a user cannot join the same group multiple times
}

model Ticket {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  priority    Priority  @default(LOW)
  status      Status    @default(OPEN)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  type        String    @default("TASK")
  // Foreign Keys
  userId      String    @db.ObjectId // Creator of the ticket
  assignedToId String?  @db.ObjectId // Assigned user (nullable)
  groupId     String    @db.ObjectId // Foreign key to Group model

  // Relations
  createdBy   User      @relation("UserTickets", fields: [userId], references: [id])
  assignedTo  User?     @relation("UserAssignedTickets", fields: [assignedToId], references: [id], onDelete: SetNull) // If an assigned user is deleted, the ticket remains but becomes unassigned.
  group       Group     @relation(fields: [groupId], references: [id]) // Ticket is attached to a group
  comments    Comment[] @relation("TicketComments")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign Keys
  userId    String?  @db.ObjectId
  ticketId  String   @db.ObjectId

  // Relations
  user      User?    @relation("UserComments", fields: [userId], references: [id], onDelete: SetNull) // If a user is deleted, the comment remains but becomes null
  ticket    Ticket   @relation("TicketComments", fields: [ticketId], references: [id], onDelete: Cascade)
}

 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
// model Session {
//   id           String   @id @default(auto()) @map("_id") @db.ObjectId
//   sessionToken String   @unique
//   userId       String   @db.ObjectId
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }
 
// model VerificationToken {
//   id         String   @id @default(auto()) @map("_id") @db.ObjectId
//   identifier String
//   token      String
//   expires    DateTime
 
//   @@unique([identifier, token])
// }
 
// // Optional for WebAuthn support
// model Authenticator {
//   credentialID         String  @id @map("_id")
//   userId               String  @db.ObjectId
//   providerAccountId    String
//   credentialPublicKey  String
//   counter              Int
//   credentialDeviceType String
//   credentialBackedUp   Boolean
//   transports           String?
 
//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
//   @@unique([userId, credentialID])
// }